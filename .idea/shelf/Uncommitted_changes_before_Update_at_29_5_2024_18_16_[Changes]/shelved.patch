Index: src/main/java/proyecto/dh/config/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package proyecto.dh.config;\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\r\nimport org.springframework.security.config.annotation.authentication.configuration.EnableGlobalAuthentication;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\r\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.core.AuthenticationException;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.authentication.Http403ForbiddenEntryPoint;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\nimport org.springframework.security.web.AuthenticationEntryPoint;\r\nimport proyecto.dh.resources.auth.filter.JwtAuthenticationFilter;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\n@AllArgsConstructor\r\n@EnableMethodSecurity\r\npublic class SecurityConfig {\r\n    private final JwtAuthenticationFilter jwtAuthenticationFilter;\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        http.csrf(AbstractHttpConfigurer::disable)\r\n                .authorizeHttpRequests(auth ->\r\n                        auth.requestMatchers(\"/auth/**\").permitAll()\r\n                                .requestMatchers(\"/admin/**\").hasRole(\"ADMIN\")\r\n                                .anyRequest().permitAll())\r\n                .exceptionHandling(exceptionHandling -> exceptionHandling\r\n                        .authenticationEntryPoint(authEntryPoint())\r\n                        .accessDeniedHandler((request, response, accessDeniedException) -> {\r\n                            // Delegar a GlobalException\r\n                            throw new AuthenticationException(\"No tienes permisos para acceder a este recurso.\") {};\r\n                        }))\r\n                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\r\n                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);\r\n\r\n        return http.build();\r\n    }\r\n\r\n    @Bean\r\n    public PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {\r\n        return authConfig.getAuthenticationManager();\r\n    }\r\n\r\n    @Bean\r\n    public AuthenticationEntryPoint authEntryPoint() {\r\n        return new Http403ForbiddenEntryPoint();\r\n    }\r\n}\r\n
===================================================================
diff --git a/src/main/java/proyecto/dh/config/SecurityConfig.java b/src/main/java/proyecto/dh/config/SecurityConfig.java
--- a/src/main/java/proyecto/dh/config/SecurityConfig.java	
+++ b/src/main/java/proyecto/dh/config/SecurityConfig.java	
@@ -33,7 +33,6 @@
         http.csrf(AbstractHttpConfigurer::disable)
                 .authorizeHttpRequests(auth ->
                         auth.requestMatchers("/auth/**").permitAll()
-                                .requestMatchers("/admin/**").hasRole("ADMIN")
                                 .anyRequest().permitAll())
                 .exceptionHandling(exceptionHandling -> exceptionHandling
                         .authenticationEntryPoint(authEntryPoint())
